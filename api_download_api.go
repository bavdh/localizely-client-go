/*
Localizely API

<h2>Getting started</h2><p>Localizely API is built on <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\" target=\"_blank\">REST</a>. <br>You can use this API for importing & exporting your localization files in order to automate the process with `curl` scripts or external <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\" target=\"_blank\">CI</a> tools. <br>Response is returned in JSON form even in case of error. <br></p><p>If you Authenticate with your API token on this page by clicking \"Authorize\" button, you can make API calls directly from here with \"Try it out\", and generate such `curl` examples. </p><h2>API Authentication</h2><p>Authenticate your account by sending your API token as a request header `X-Api-Token`. <br>The token can be found under <a href=\"https://app.localizely.com/account\" target=\"_blank\">My Profile</a> page. <br>A user must have an Admin role in the project in order to access the project with his token. <br>API requests without authentication will fail.</p><p><b>Base url:</b> `https://api.localizely.com`</p>

API version: 1.2.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package localizely

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


// DownloadAPIApiService DownloadAPIApi service
type DownloadAPIApiService service

type ApiGetLocalizationFileRequest struct {
	ctx context.Context
	ApiService *DownloadAPIApiService
	projectId string
	type_ *string
	branch *string
	langCodes *string
	javaPropertiesEncoding *string
	includeTags *[]string
	excludeTags *[]string
	exportEmptyAs *string
}

// File format
func (r ApiGetLocalizationFileRequest) Type_(type_ string) ApiGetLocalizationFileRequest {
	r.type_ = &type_
	return r
}

// Name of the branch to download file from. Only in case of activated branching feature.
func (r ApiGetLocalizationFileRequest) Branch(branch string) ApiGetLocalizationFileRequest {
	r.branch = &branch
	return r
}

// Language to download, specified as language code. e.g. &#x60;en&#x60;, &#x60;en_GB&#x60; or &#x60;en-GB&#x60;. For multiple languages use comma separator. If omitted, all languages are downloaded.
func (r ApiGetLocalizationFileRequest) LangCodes(langCodes string) ApiGetLocalizationFileRequest {
	r.langCodes = &langCodes
	return r
}

// (Only for Java .properties files download) Character encoding. Default is &#x60;latin_1&#x60;.
func (r ApiGetLocalizationFileRequest) JavaPropertiesEncoding(javaPropertiesEncoding string) ApiGetLocalizationFileRequest {
	r.javaPropertiesEncoding = &javaPropertiesEncoding
	return r
}

// Optional list of tags to be downloaded. &lt;br&gt;If not set, all string keys will be considered for download. &lt;br&gt;&lt;br&gt;Multiple tags can be defined in a following way: &#x60;&amp;include_tags&#x3D;ANDROID&amp;include_tags&#x3D;ANDROID_SPRINT05&#x60;.
func (r ApiGetLocalizationFileRequest) IncludeTags(includeTags []string) ApiGetLocalizationFileRequest {
	r.includeTags = &includeTags
	return r
}

// Optional list of tags to be excluded from download. &lt;br&gt;If not set, all string keys will be considered for download. &lt;br&gt;&lt;br&gt; Multiple tags can be defined in a following way: &#x60;&amp;exclude_tags&#x3D;REMOVED&amp;exclude_tags&#x3D;REMOVED_SPRINT05&#x60;.
func (r ApiGetLocalizationFileRequest) ExcludeTags(excludeTags []string) ApiGetLocalizationFileRequest {
	r.excludeTags = &excludeTags
	return r
}

// Optional. How you would like empty translations to be exported. Allowed values are &#x60;empty&#x60; to keep empty, &#x60;main&#x60; to replace with the main language value, or &#x60;skip&#x60; to omit.
func (r ApiGetLocalizationFileRequest) ExportEmptyAs(exportEmptyAs string) ApiGetLocalizationFileRequest {
	r.exportEmptyAs = &exportEmptyAs
	return r
}

func (r ApiGetLocalizationFileRequest) Execute() (*http.Response, error) {
	return r.ApiService.GetLocalizationFileExecute(r)
}

/*
GetLocalizationFile Download translations for a language in a specified file format

<b>Note:</b> This endpoint is intended for getting translation files to your source-code. This endpoint should not be called directly from you app in runtime, as it has <b>rate-limiting</b>. <br/>For over-the-air translation updates please consider using our <a href="https://localizely.com/flutter-over-the-air/" target="_blank">SDK for Flutter</a> or <a href="https://localizely.com/aws-s3-integration/" target="_blank">integrate with AWS S3 bucket</a>.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID - Can be found on 'My projects' page
 @return ApiGetLocalizationFileRequest
*/
func (a *DownloadAPIApiService) GetLocalizationFile(ctx context.Context, projectId string) ApiGetLocalizationFileRequest {
	return ApiGetLocalizationFileRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
	}
}

// Execute executes the request
func (a *DownloadAPIApiService) GetLocalizationFileExecute(r ApiGetLocalizationFileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DownloadAPIApiService.GetLocalizationFile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/projects/{project_id}/files/download"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterToString(r.projectId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.type_ == nil {
		return nil, reportError("type_ is required and must be specified")
	}

	if r.branch != nil {
		localVarQueryParams.Add("branch", parameterToString(*r.branch, ""))
	}
	if r.langCodes != nil {
		localVarQueryParams.Add("lang_codes", parameterToString(*r.langCodes, ""))
	}
	localVarQueryParams.Add("type", parameterToString(*r.type_, ""))
	if r.javaPropertiesEncoding != nil {
		localVarQueryParams.Add("java_properties_encoding", parameterToString(*r.javaPropertiesEncoding, ""))
	}
	if r.includeTags != nil {
		t := *r.includeTags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("include_tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("include_tags", parameterToString(t, "multi"))
		}
	}
	if r.excludeTags != nil {
		t := *r.excludeTags
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("exclude_tags", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("exclude_tags", parameterToString(t, "multi"))
		}
	}
	if r.exportEmptyAs != nil {
		localVarQueryParams.Add("export_empty_as", parameterToString(*r.exportEmptyAs, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["API auth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-Api-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorDto
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
